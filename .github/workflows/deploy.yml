name: Deploy User Service to Azure Functions

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: flixsync-user-service
  AZURE_RESOURCE_GROUP: flixsync
  AZURE_LOCATION: centralus
  AZURE_STORAGE_ACCOUNT: flixsyncuserstorage
  COSMOS_ACCOUNT: flixsync-cosmos
  COSMOS_DATABASE_NAME: flixsync-user-database
  COSMOS_CONTAINER_NAME: users
  NODE_VERSION: '22'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run tests
      run: npm run test:run
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        COSMOS_ENDPOINT: https://test.documents.azure.com:443/
        COSMOS_KEY: test-key
        COSMOS_DATABASE_NAME: test
        COSMOS_CONTAINER_NAME: users

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-build
        path: |
          dist/
          package*.json
          node_modules/
          host.json

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: functionapp-build
        path: ./build

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resources
      run: |
        # Create resource group if it doesn't exist
        if ! az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating resource group ${{ env.AZURE_RESOURCE_GROUP }}..."
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}
        else
          echo "Resource group ${{ env.AZURE_RESOURCE_GROUP }} already exists"
        fi

        # Create storage account if it doesn't exist
        if ! az storage account show --name ${{ env.AZURE_STORAGE_ACCOUNT }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating storage account ${{ env.AZURE_STORAGE_ACCOUNT }}..."
          az storage account create \
            --name ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --sku Standard_LRS \
            --kind StorageV2
        else
          echo "Storage account ${{ env.AZURE_STORAGE_ACCOUNT }} already exists"
        fi

        # Create Function App if it doesn't exist (Consumption plan auto-created)
        if ! az functionapp show --name ${{ env.AZURE_FUNCTIONAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating function app ${{ env.AZURE_FUNCTIONAPP_NAME }}..."
          az functionapp create \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --consumption-plan-location ${{ env.AZURE_LOCATION }} \
            --runtime node \
            --runtime-version 22 \
            --functions-version 4 \
            --storage-account ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --os-type Linux
        else
          echo "Function app ${{ env.AZURE_FUNCTIONAPP_NAME }} already exists"
        fi

        # Get Function App outbound IPs and update Cosmos DB firewall
        echo "Securing Cosmos DB with Function App IP whitelist..."
        FUNCTION_IPS=$(az functionapp show \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "possibleOutboundIpAddresses" -o tsv)

        # Get current Cosmos DB IP rules
        CURRENT_IPS=$(az cosmosdb show \
          --name ${{ env.COSMOS_ACCOUNT }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "ipRules[].ipAddressOrRange" -o tsv)

        # Merge IPs (deduplicating)
        ALL_IPS=$(echo -e "$CURRENT_IPS\n$FUNCTION_IPS" | tr ',' '\n' | sort -u | grep -v '^$' | tr '\n' ',')

        # Log the changes for visibility
        echo "=== IP Update Summary ==="
        echo "Service: ${{ env.AZURE_FUNCTIONAPP_NAME }}"
        echo "Current IPs in this deployment: $(echo $FUNCTION_IPS | tr ',' '\n' | wc -l) IPs"
        echo "$FUNCTION_IPS" | tr ',' '\n' | sed 's/^/  - /'
        echo ""
        echo "Total IPs after merge: $(echo $ALL_IPS | tr ',' '\n' | grep -v '^$' | wc -l) IPs"
        echo ""
        echo "⚠️  Note: Old IPs from previous deployments remain for safety"
        echo "    To audit/clean old IPs, check Cosmos DB firewall rules manually"
        echo ""

        # Update Cosmos DB firewall
        az cosmosdb update \
          --name ${{ env.COSMOS_ACCOUNT }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --ip-range-filter "$ALL_IPS"

        # Configure app settings (always update to ensure latest values)
        echo "Configuring app settings..."
        az functionapp config appsettings set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            NODE_ENV=production \
            AzureWebJobsFeatureFlags=EnableWorkerIndexing \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}" \
            COSMOS_ENDPOINT="${{ secrets.COSMOS_ENDPOINT }}" \
            COSMOS_KEY="${{ secrets.COSMOS_KEY }}" \
            COSMOS_DATABASE_NAME="${{ env.COSMOS_DATABASE_NAME }}" \
            COSMOS_CONTAINER_NAME="${{ env.COSMOS_CONTAINER_NAME }}"

    - name: Prepare deployment package
      run: |
        # Debug: Check what's in build directory
        echo "=== Contents of build directory ==="
        ls -la build/

        # Create deployment directory
        mkdir -p deploy

        # Copy files preserving dist/ folder structure per Azure Functions docs
        cp -r build/dist deploy/
        cp build/package.json deploy/
        cp build/package-lock.json deploy/
        cp build/host.json deploy/
        cp -r build/node_modules deploy/

        # Debug: Check deployment package structure
        echo "=== Deployment package structure ==="
        ls -la deploy/
        echo "=== Checking for package.json ==="
        cat deploy/package.json | head -10

    - name: Deploy to Azure Functions
      run: |
        cd deploy
        zip -r ../deployment.zip .

        # Use direct zip deploy for Azure Functions
        az functionapp deployment source config-zip \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --src ../deployment.zip

        # Wait for deployment to complete and restart
        echo "Waiting for deployment to sync..."
        sleep 10
        az functionapp restart --name ${{ env.AZURE_FUNCTIONAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        echo "Deployment complete. Functions should be available shortly."

    - name: Azure logout
      run: az logout
      if: always()

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/v1/health)
        if [ $response != "200" ]; then
          echo "Health check failed with status code: $response"
          exit 1
        fi
        echo "Health check passed!"

    - name: Test API endpoints
      run: |
        # Test user registration endpoint
        curl -f -X POST https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"TestPass123!","name":"Test User"}' || echo "Registration endpoint test failed (expected for existing user)"

        echo "API endpoint tests completed!"