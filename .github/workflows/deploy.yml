name: Deploy User Service to Azure Functions

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: flixsync-user-service
  AZURE_RESOURCE_GROUP: flixsync
  AZURE_LOCATION: centralus
  AZURE_STORAGE_ACCOUNT: flixsyncuserstorage
  COSMOS_DATABASE_NAME: flixsync-user-database
  COSMOS_CONTAINER_NAME: users
  VNET_NAME: flixsync-vnet
  SUBNET_NAME: flixsync-functions-subnet
  NSG_NAME: flixsync-nsg
  NODE_VERSION: '18'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run tests
      run: npm run test:run
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        COSMOS_ENDPOINT: https://test.documents.azure.com:443/
        COSMOS_KEY: test-key
        COSMOS_DATABASE_NAME: test
        COSMOS_CONTAINER_NAME: users

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-build
        path: |
          dist/
          package*.json
          node_modules/

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: functionapp-build
        path: ./build

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Resources
      run: |
        # Create resource group if it doesn't exist
        if ! az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating resource group ${{ env.AZURE_RESOURCE_GROUP }}..."
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}
        else
          echo "Resource group ${{ env.AZURE_RESOURCE_GROUP }} already exists"
        fi

        # Create storage account if it doesn't exist
        if ! az storage account show --name ${{ env.AZURE_STORAGE_ACCOUNT }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating storage account ${{ env.AZURE_STORAGE_ACCOUNT }}..."
          az storage account create \
            --name ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --sku Standard_LRS \
            --kind StorageV2
        else
          echo "Storage account ${{ env.AZURE_STORAGE_ACCOUNT }} already exists"
        fi

        # Get subnet ID (assumes VNet and subnet already exist)
        SUBNET_ID=$(az network vnet subnet show \
          --name ${{ env.SUBNET_NAME }} \
          --vnet-name ${{ env.VNET_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query id -o tsv 2>/dev/null || echo "")

        # Add VNet rule to storage account if subnet exists and rule not already added
        if [ ! -z "$SUBNET_ID" ]; then
          EXISTING_RULES=$(az storage account network-rule list \
            --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "virtualNetworkRules[?virtualNetworkResourceId=='$SUBNET_ID']" -o tsv)

          if [ -z "$EXISTING_RULES" ]; then
            echo "Adding VNet rule to storage account..."
            az storage account network-rule add \
              --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --subnet $SUBNET_ID
          else
            echo "VNet rule already exists for storage account"
          fi
        fi

        # Create Consumption Plan if it doesn't exist
        if ! az functionapp plan show --name flixsync-plan --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating function app plan flixsync-plan..."
          az functionapp plan create \
            --name flixsync-plan \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --sku Dynamic
        else
          echo "Function app plan flixsync-plan already exists"
        fi

        # Create Function App if it doesn't exist
        if ! az functionapp show --name ${{ env.AZURE_FUNCTIONAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating function app ${{ env.AZURE_FUNCTIONAPP_NAME }}..."
          az functionapp create \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --plan flixsync-plan \
            --runtime node \
            --runtime-version 18 \
            --functions-version 4 \
            --storage-account ${{ env.AZURE_STORAGE_ACCOUNT }} \
            --os-type Linux
        else
          echo "Function app ${{ env.AZURE_FUNCTIONAPP_NAME }} already exists"
        fi

        # Check if VNet integration exists
        VNET_INTEGRATION=$(az functionapp vnet-integration list \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[0].id" -o tsv 2>/dev/null || echo "")

        if [ -z "$VNET_INTEGRATION" ]; then
          echo "Adding VNet integration to function app..."
          az functionapp vnet-integration add \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --vnet ${{ env.VNET_NAME }} \
            --subnet ${{ env.SUBNET_NAME }}
        else
          echo "VNet integration already exists for function app"
        fi

        # Configure app settings (always update to ensure latest values)
        echo "Configuring app settings..."
        az functionapp config appsettings set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            NODE_ENV=production \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}" \
            COSMOS_ENDPOINT="${{ secrets.COSMOS_ENDPOINT }}" \
            COSMOS_KEY="${{ secrets.COSMOS_KEY }}" \
            COSMOS_DATABASE_NAME="${{ env.COSMOS_DATABASE_NAME }}" \
            COSMOS_CONTAINER_NAME="${{ env.COSMOS_CONTAINER_NAME }}" \
            WEBSITE_VNET_ROUTE_ALL=1

    - name: Prepare deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy

        # Copy application files
        cp -r * deploy/ 2>/dev/null || true
        cp -r .* deploy/ 2>/dev/null || true

        # Install production dependencies
        cd deploy
        npm ci --only=production

    - name: Deploy to Azure Functions
      run: |
        cd deploy
        zip -r ../deployment.zip .
        az functionapp deployment source config-zip \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --src ../deployment.zip

    - name: Azure logout
      run: az logout
      if: always()

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/v1/health)
        if [ $response != "200" ]; then
          echo "Health check failed with status code: $response"
          exit 1
        fi
        echo "Health check passed!"

    - name: Test API endpoints
      run: |
        # Test user registration endpoint
        curl -f -X POST https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"TestPass123!","name":"Test User"}' || echo "Registration endpoint test failed (expected for existing user)"

        echo "API endpoint tests completed!"